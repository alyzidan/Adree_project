import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell, } from '@/components/ui/table';
import Badge from '@/components/ui/badge/Badge';
import Button from '@/components/ui/button/Button';
import { Pencil, Trash2, Calendar, Clock } from 'lucide-react';
import { STATUS_COLORS, PRIORITY_COLORS, TASK_STATUS_LABELS, TASK_CATEGORY_LABELS, TASK_PRIORITY_LABELS, } from '@/lib/constants';
import { formatDate } from '@/lib/utils';
import TaskModal from './TaskModal';
import DeleteTaskDialog from './DeleteTaskDialog';
function TaskTable({ tasks }) {
    const [editingTask, setEditingTask] = useState(null);
    const [deletingTaskId, setDeletingTaskId] = useState(null);
    return (_jsxs(_Fragment, { children: [_jsx("div", { className: "overflow-hidden rounded-lg border border-neutral-200", children: _jsxs(Table, { children: [_jsx(TableHeader, { children: _jsxs(TableRow, { children: [_jsx(TableHead, { children: "Task" }), _jsx(TableHead, { children: "Status" }), _jsx(TableHead, { children: "Category" }), _jsx(TableHead, { children: "Priority" }), _jsx(TableHead, { children: "Due Date" }), _jsx(TableHead, { children: "Hours" }), _jsx(TableHead, { className: "text-right", children: "Actions" })] }) }), _jsx(TableBody, { children: tasks.map((task) => (_jsxs(TableRow, { "data-testid": "task-row", children: [_jsx(TableCell, { className: "max-w-xs", children: _jsxs("div", { children: [_jsx("p", { className: "font-medium text-neutral-900", children: task.title }), task.description && (_jsx("p", { className: "mt-1 line-clamp-1 text-sm text-neutral-500", children: task.description })), task.assignee && (_jsxs("p", { className: "mt-1 text-xs text-neutral-400", children: ["Assigned to: ", task.assignee] }))] }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: STATUS_COLORS[task.status], dot: true, children: TASK_STATUS_LABELS[task.status] }) }), _jsx(TableCell, { children: _jsx("span", { className: "text-sm text-neutral-700", children: TASK_CATEGORY_LABELS[task.category] }) }), _jsx(TableCell, { children: _jsx(Badge, { variant: PRIORITY_COLORS[task.priority], size: "sm", children: TASK_PRIORITY_LABELS[task.priority] }) }), _jsx(TableCell, { children: task.dueDate ? (_jsxs("div", { className: "flex items-center gap-1 text-sm text-neutral-600", children: [_jsx(Calendar, { className: "h-3 w-3" }), formatDate(task.dueDate)] })) : (_jsx("span", { className: "text-sm text-neutral-400", children: "\u2014" })) }), _jsx(TableCell, { children: _jsxs("div", { className: "flex items-center gap-1 text-sm text-neutral-600", children: [_jsx(Clock, { className: "h-3 w-3" }), task.estimatedHours, "h"] }) }), _jsx(TableCell, { className: "text-right", children: _jsxs("div", { className: "flex justify-end gap-1", children: [_jsx(Button, { size: "sm", variant: "ghost", onClick: () => setEditingTask(task), "aria-label": `Edit ${task.title}`, children: _jsx(Pencil, { className: "h-4 w-4" }) }), _jsx(Button, { size: "sm", variant: "ghost", "aria-label": `Delete ${task.title}`, onClick: () => setDeletingTaskId(task.id), children: _jsx(Trash2, { className: "h-4 w-4 text-danger-600" }) })] }) })] }, task.id))) })] }) }), editingTask && (_jsx(TaskModal, { open: !!editingTask, onOpenChange: (open) => !open && setEditingTask(null), mode: "edit", task: editingTask })), deletingTaskId && (_jsx(DeleteTaskDialog, { taskId: deletingTaskId, onClose: () => setDeletingTaskId(null) }))] }));
}
export default TaskTable;
