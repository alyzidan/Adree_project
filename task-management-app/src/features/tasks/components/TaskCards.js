import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState } from 'react';
import { Pencil, Trash2, Calendar, Clock, User } from 'lucide-react';
import Card, { CardContent } from '@/components/ui/card/Card';
import Badge from '@/components/ui/badge/Badge';
import Button from '@/components/ui/button/Button';
import { STATUS_COLORS, PRIORITY_COLORS, TASK_STATUS_LABELS, TASK_CATEGORY_LABELS, TASK_PRIORITY_LABELS, } from '@/lib/constants';
import { formatDate } from '@/lib/utils';
import TaskModal from './TaskModal';
import DeleteTaskDialog from './DeleteTaskDialog';
function TaskCards({ tasks }) {
    const [editingTask, setEditingTask] = useState(null);
    const [deletingTaskId, setDeletingTaskId] = useState(null);
    return (_jsxs(_Fragment, { children: [_jsx("div", { className: "space-y-3", children: tasks.map((task) => (_jsx(Card, { hoverable: true, "data-testid": "task-card", children: _jsxs(CardContent, { className: "p-4", children: [_jsxs("div", { className: "mb-3 flex items-start justify-between", children: [_jsxs("div", { className: "flex-1", children: [_jsx("h3", { className: "font-semibold text-neutral-900", children: task.title }), task.description && (_jsx("p", { className: "mt-1 line-clamp-2 text-sm text-neutral-600", children: task.description }))] }), _jsx(Badge, { variant: STATUS_COLORS[task.status], dot: true, size: "sm", children: TASK_STATUS_LABELS[task.status] })] }), _jsxs("div", { className: "space-y-2 border-t border-neutral-100 pt-3", children: [_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-neutral-500", children: "Category" }), _jsx("span", { className: "font-medium text-neutral-900", children: TASK_CATEGORY_LABELS[task.category] })] }), _jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-neutral-500", children: "Priority" }), _jsx(Badge, { variant: PRIORITY_COLORS[task.priority], size: "sm", children: TASK_PRIORITY_LABELS[task.priority] })] }), task.assignee && (_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-neutral-500", children: "Assignee" }), _jsxs("div", { className: "flex items-center gap-1", children: [_jsx(User, { className: "h-3 w-3 text-neutral-400" }), _jsx("span", { className: "text-neutral-900", children: task.assignee })] })] })), task.dueDate && (_jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-neutral-500", children: "Due Date" }), _jsxs("div", { className: "flex items-center gap-1", children: [_jsx(Calendar, { className: "h-3 w-3 text-neutral-400" }), _jsx("span", { className: "text-neutral-900", children: formatDate(task.dueDate) })] })] })), _jsxs("div", { className: "flex items-center justify-between text-sm", children: [_jsx("span", { className: "text-neutral-500", children: "Estimated" }), _jsxs("div", { className: "flex items-center gap-1", children: [_jsx(Clock, { className: "h-3 w-3 text-neutral-400" }), _jsxs("span", { className: "text-neutral-900", children: [task.estimatedHours, "h"] })] })] })] }), _jsxs("div", { className: "mt-4 flex gap-2 border-t border-neutral-100 pt-3", children: [_jsx(Button, { variant: "outline", size: "sm", className: "flex-1", onClick: () => setEditingTask(task), leftIcon: _jsx(Pencil, { className: "h-4 w-4" }), children: "Edit" }), _jsx(Button, { variant: "destructive", size: "sm", className: "flex-1", onClick: () => setDeletingTaskId(task.id), leftIcon: _jsx(Trash2, { className: "h-4 w-4" }), children: "Delete" })] })] }) }, task.id))) }), editingTask && (_jsx(TaskModal, { open: !!editingTask, onOpenChange: (open) => !open && setEditingTask(null), mode: "edit", task: editingTask })), deletingTaskId && (_jsx(DeleteTaskDialog, { taskId: deletingTaskId, onClose: () => setDeletingTaskId(null) }))] }));
}
export default TaskCards;
